[gd_scene load_steps=4 format=3 uid="uid://veohjciro1nh"]

[sub_resource type="GDScript" id="GDScript_js7in"]
resource_name = "Player"
script/source = "extends CharacterBody3D

@onready var CameraPivot : Node3D = $CollisionShape3D/CameraPivot as Node3D;
@onready var FootstepPlayer = $FootstepPlayer;

signal footstep;

var mouse_look_sensitivity : float = ProjectSettings.get_setting(\"player/mouse_look_sensitivity\")
var gamepad_look_sensitivity : float = ProjectSettings.get_setting(\"player/gamepad_look_sensitivity\")

const SPEED = 5.0
const JUMP_VELOCITY = 4.5

var previous_position : Vector3;
var travelled_distance : float = 0.0;

# Get the gravity from the project settings to be synced with RigidBody nodes.
var gravity = ProjectSettings.get_setting(\"physics/3d/default_gravity\")

func _ready():
	Input.mouse_mode = Input.MOUSE_MODE_CAPTURED;
	previous_position = position;

func _physics_process(delta):
	process_movement(delta)
	handle_gamepad_look(delta)
	
func _input(event):
	if event.is_action_type():
		var event_name : StringName = get_action_name_from_event(event);
		if !event_name.is_empty():
			handle_action_input(event_name)
				
	if event is InputEventMouseMotion:
		handle_mouse_look(event)

# Movement
func process_movement(delta : float):
	if not is_on_floor():
		velocity.x += gravity * delta

	# Get the input direction and handle the movement/deceleration.
	var input_dir : Vector2 = Input.get_vector(
		\"walk_left\",
		\"walk_right\",
		\"walk_forward\",
		\"walk_backward\"
	)	
		
	var direction : Vector3 = (transform.basis * Vector3(input_dir.x, 0, input_dir.y))
	
	# Prevent super speed on diagonal movement but only at full speed not to lose analog info 
	if direction.length_squared() > 1:
		direction = direction.normalized()
		
	if direction:
		velocity.y = direction.x * SPEED
		velocity.z = direction.z * SPEED
	else:
		velocity.y = move_toward(velocity.y, 0, SPEED)
		velocity.z = move_toward(velocity.z, 0, SPEED)

	travelled_distance += (previous_position - position).length();
	
	if travelled_distance >= SPEED / 1.6:
		travelled_distance = 0.0;
		emit_signal(\"footstep\");
		FootstepPlayer.play_footstep();
		
	previous_position = position;

	move_and_slide()

func handle_mouse_look(event : InputEvent):
	var look_x : float = -event.relative.x * mouse_look_sensitivity * get_process_delta_time();
	var look_y : float = -event.relative.y * mouse_look_sensitivity * get_process_delta_time()
	apply_player_rotation(Vector2(look_x, look_y))

func handle_gamepad_look(delta : float):
	var look_vec : Vector2 = Input.get_vector(
		\"look_left\",
		\"look_right\",
		\"look_up\",
		\"look_down\"
	) * gamepad_look_sensitivity * delta

	# Prevent super speed on diagonal look but only at full speed not to lose analog info 
	if look_vec.length_squared() > 1:
		look_vec = look_vec.normalized()
		
	apply_player_rotation(look_vec * -1)

func apply_player_rotation(rotation_vec : Vector2):
	rotate_y(rotation_vec.x)
	CameraPivot.rotate_x(rotation_vec.y)
	CameraPivot.rotation.x = clamp(CameraPivot.rotation.x, deg_to_rad(-89), deg_to_rad(89))

func get_action_name_from_event(event : InputEvent) -> StringName:
	var action : StringName;
	for _action in InputMap.get_actions():
		if InputMap.event_is_action(event, _action):
			action = _action;
			break;
	return action

func handle_action_input(action : StringName):
	if Input.is_action_just_pressed(action):
		match action:
			&\"interact\":
				pass;
"

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_add0j"]
radius = 0.3
height = 1.7

[sub_resource type="GDScript" id="GDScript_p8rxf"]
script/source = "extends Node3D

var metal_footsteps : Array[Resource] = [];
var glass_footsteps : Array[Resource] = [];
var rng = RandomNumberGenerator.new();

@onready var raycast : RayCast3D = $RayCast3D;
@onready var sound_player : AudioStreamPlayer3D = $AudioPlayer;

enum FootstepType {
	METAL,
	GLASS
}

func _ready():
	rng.randomize();
	metal_footsteps.append(preload(\"res://Scenes/Player/Audio/footsteps/metal_1.wav\"));
	metal_footsteps.append(preload(\"res://Scenes/Player/Audio/footsteps/metal_2.wav\"));
	metal_footsteps.append(preload(\"res://Scenes/Player/Audio/footsteps/metal_3.wav\"));
	metal_footsteps.append(preload(\"res://Scenes/Player/Audio/footsteps/metal_4.wav\"));
	metal_footsteps.append(preload(\"res://Scenes/Player/Audio/footsteps/metal_5.wav\"));
	
	glass_footsteps.append(preload(\"res://Scenes/Player/Audio/footsteps/glass_1.wav\"));


func play_footstep():
	var collider : StaticBody3D = raycast.get_collider() as StaticBody3D;
	if collider:
		var floor : MeshInstance3D = collider.get_parent() as MeshInstance3D;
		var type : FootstepType;
		if floor:
			match floor.mesh.get_surface_count():
				1: type = FootstepType.METAL;
				2: type = FootstepType.GLASS;
		
		match type:
			FootstepType.METAL:
				metal_footsteps.shuffle();
				sound_player.stream = metal_footsteps.front();
			FootstepType.GLASS:
				glass_footsteps.shuffle();
				sound_player.stream = glass_footsteps.front();
				
		sound_player.pitch_scale = rng.randf_range(0.8, 1.2);
		sound_player.volume_db = 0.15;
		sound_player.play();
"

[node name="CharacterBody3D" type="CharacterBody3D"]
script = SubResource("GDScript_js7in")

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.858955, 0)
shape = SubResource("CapsuleShape3D_add0j")

[node name="CameraPivot" type="Node3D" parent="CollisionShape3D"]

[node name="Camera3D" type="Camera3D" parent="CollisionShape3D/CameraPivot"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.643579, 0)

[node name="FootstepPlayer" type="Node3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.0646665, 0)
script = SubResource("GDScript_p8rxf")

[node name="RayCast3D" type="RayCast3D" parent="FootstepPlayer"]
target_position = Vector3(0, -0.5, 0)

[node name="AudioPlayer" type="AudioStreamPlayer3D" parent="FootstepPlayer"]
